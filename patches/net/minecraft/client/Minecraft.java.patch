--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -13,6 +13,9 @@
 import com.mojang.authlib.properties.PropertyMap;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.blaze3d.matrix.MatrixStack;
+import com.mojang.blaze3d.platform.GLX;
+import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.GlStateManager.FogMode;
 import com.mojang.blaze3d.platform.PlatformDescriptors;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.datafixers.DataFixer;
@@ -23,14 +26,25 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.net.Proxy;
 import java.net.SocketAddress;
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.text.SimpleDateFormat;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
+import java.util.Deque;
+import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Queue;
@@ -40,14 +54,44 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 import java.util.function.Supplier;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import net.minecraft.block.Blocks;
+import net.minecraft.state.EnumProperty;
+import net.minecraft.state.StateContainer;
+import net.minecraft.util.*;
+import net.minecraft.util.Timer;
+import net.optifine.Config;
+import net.optifine.CustomItems;
+import net.optifine.shaders.Shaders;
+import net.optifine.util.TextureUtils;
+import org.apache.commons.lang3.Validate;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.lwjgl.opengl.ARBShaderObjects;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL13;
+import org.lwjgl.opengl.GL30;
+import org.vivecraft.api.ErrorHelper;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.render.RenderConfigException;
+import org.vivecraft.render.VRShaders;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.utils.*;
+import org.vivecraft.utils.lwjgl.Matrix4f;
+import org.vivecraft.utils.math.Vector3;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockRenderType;
 import net.minecraft.block.BlockState;
 import net.minecraft.client.audio.BackgroundMusicSelector;
 import net.minecraft.client.audio.BackgroundMusicTracks;
 import net.minecraft.client.audio.MusicTicker;
+import net.minecraft.client.audio.SoundEngine;
 import net.minecraft.client.audio.SoundHandler;
 import net.minecraft.client.entity.player.ClientPlayerEntity;
 import net.minecraft.client.gui.DialogTexts;
@@ -94,10 +138,12 @@
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.FirstPersonRenderer;
 import net.minecraft.client.renderer.FogRenderer;
+import net.minecraft.client.renderer.GLAllocation;
 import net.minecraft.client.renderer.GPUWarning;
 import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.IWindowEventListener;
 import net.minecraft.client.renderer.ItemRenderer;
+import net.minecraft.client.renderer.RenderHelper;
 import net.minecraft.client.renderer.RenderTypeBuffers;
 import net.minecraft.client.renderer.ScreenSize;
 import net.minecraft.client.renderer.Tessellator;
@@ -130,6 +176,7 @@
 import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.client.settings.PointOfView;
 import net.minecraft.client.shader.Framebuffer;
+import net.minecraft.client.shader.FramebufferConstants;
 import net.minecraft.client.tutorial.Tutorial;
 import net.minecraft.client.util.IMutableSearchTree;
 import net.minecraft.client.util.ITooltipFlag;
@@ -204,7 +251,6 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.Session;
 import net.minecraft.util.SharedConstants;
-import net.minecraft.util.Timer;
 import net.minecraft.util.Unit;
 import net.minecraft.util.Util;
 import net.minecraft.util.concurrent.RecursiveEventLoop;
@@ -215,6 +261,7 @@
 import net.minecraft.util.math.EntityRayTraceResult;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.RayTraceResult;
+import net.minecraft.util.math.vector.Vector3d;
 import net.minecraft.util.registry.Bootstrap;
 import net.minecraft.util.registry.DynamicRegistries;
 import net.minecraft.util.registry.Registry;
@@ -235,12 +282,16 @@
 import net.minecraft.world.storage.IServerConfiguration;
 import net.minecraft.world.storage.SaveFormat;
 import net.minecraft.world.storage.ServerWorldInfo;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import net.minecraftforge.client.extensions.IForgeMinecraft;
+import net.optifine.reflect.Reflector;
+import net.optifine.reflect.ReflectorConstructor;
 
-public class Minecraft extends RecursiveEventLoop<Runnable> implements ISnooperInfo, IWindowEventListener
+public class Minecraft extends RecursiveEventLoop<Runnable> implements ISnooperInfo, IWindowEventListener, IForgeMinecraft
 {
     private static Minecraft instance;
+
+    public final String minecriftVerString = "Vivecraft 1.16.5 jrbudda-NONVR-7-8";
+
     private static final Logger LOGGER = LogManager.getLogger();
     public static final boolean IS_RUNNING_ON_MAC = Util.getOSType() == Util.OS.OSX;
     public static final ResourceLocation DEFAULT_FONT_RENDERER_NAME = new ResourceLocation("default");
@@ -271,7 +322,7 @@
     public final DebugRenderer debugRenderer;
     private final AtomicReference<TrackingChunkStatusListener> refChunkStatusListener = new AtomicReference<>();
     public final IngameGui ingameGUI;
-    public final GameSettings gameSettings;
+    public GameSettings gameSettings;
     private final CreativeSettings creativeSettings;
     public final MouseHelper mouseHelper;
     public final KeyboardListener keyboardListener;
@@ -293,7 +344,7 @@
     private final LanguageManager languageManager;
     private final BlockColors blockColors;
     private final ItemColors itemColors;
-    private final Framebuffer framebuffer;
+    public Framebuffer framebuffer;
     private final SoundHandler soundHandler;
     private final MusicTicker musicTicker;
     private final FontResourceManager fontResourceMananger;
@@ -380,6 +431,9 @@
     {
         super("Client");
         instance = this;
+    	//Forge
+    	Reflector.call(Reflector.ForgeHooksClient_invalidateLog4jThreadCache);
+    	//
         this.gameDir = gameConfig.folderInfo.gameDir;
         File file1 = gameConfig.folderInfo.assetsDir;
         this.fileResourcepacks = gameConfig.folderInfo.resourcePacksDir;
@@ -393,8 +447,9 @@
         this.sessionService = yggdrasilauthenticationservice.createMinecraftSessionService();
         this.field_244734_au = this.func_244735_a(yggdrasilauthenticationservice, gameConfig);
         this.session = gameConfig.userInfo.session;
-        LOGGER.info("Setting user: {}", (Object)this.session.getUsername());
-        LOGGER.debug("(Session ID is {})", (Object)this.session.getSessionID());
+        //Forge
+        //LOGGER.debug("(Session ID is {})", (Object)this.session.getSessionID());
+        //
         this.isDemo = gameConfig.gameInfo.isDemo;
         this.enableMultiplayer = !gameConfig.gameInfo.disableMultiplayer;
         this.enableChat = !gameConfig.gameInfo.disableChat;
@@ -451,13 +506,17 @@
 
         this.mainWindow.setFramerateLimit(this.gameSettings.framerateLimit);
         this.mouseHelper = new MouseHelper(this);
-        this.mouseHelper.registerCallbacks(this.mainWindow.getHandle());
+ //       this.mouseHelper.registerCallbacks(this.mainWindow.getHandle());
         this.keyboardListener = new KeyboardListener(this);
         this.keyboardListener.setupCallbacks(this.mainWindow.getHandle());
         RenderSystem.initRenderer(this.gameSettings.glDebugVerbosity, false);
-        this.framebuffer = new Framebuffer(this.mainWindow.getFramebufferWidth(), this.mainWindow.getFramebufferHeight(), true, IS_RUNNING_ON_MAC);
+    	//I would prefer to comment this out to ensure it isnt used, but Forge needs it or whatever.
+    	this.framebuffer = new Framebuffer(this.mainWindow.getWidth(), this.mainWindow.getHeight(), true, IS_RUNNING_ON_MAC);
         this.framebuffer.setFramebufferColor(0.0F, 0.0F, 0.0F, 0.0F);
         this.resourceManager = new SimpleReloadableResourceManager(ResourcePackType.CLIENT_RESOURCES);
+    	//Forge
+    	Reflector.call(Reflector.ClientModLoader_begin, this, this.resourcePackRepository, this.resourceManager, this.packFinder);
+    	//
         this.resourcePackRepository.reloadPacksFromFinders();
         this.gameSettings.fillResourcePackList(this.resourcePackRepository);
         this.languageManager = new LanguageManager(this.gameSettings.language);
@@ -478,7 +537,7 @@
         this.resourceManager.addReloadListener(new GrassColorReloadListener());
         this.resourceManager.addReloadListener(new FoliageColorReloadListener());
         this.mainWindow.setRenderPhase("Startup");
-        RenderSystem.setupDefaultState(0, 0, this.mainWindow.getFramebufferWidth(), this.mainWindow.getFramebufferHeight());
+    		RenderSystem.setupDefaultState(0, 0, this.mainWindow.getWidth(), this.mainWindow.getHeight());
         this.mainWindow.setRenderPhase("Post startup");
         this.blockColors = BlockColors.init();
         this.itemColors = ItemColors.init(this.blockColors);
@@ -499,6 +558,9 @@
         this.populateSearchTreeManager();
         this.resourceManager.addReloadListener(this.searchTreeManager);
         this.particles = new ParticleManager(this.world, this.textureManager);
+        //Forge
+        Reflector.call(Reflector.call(Reflector.fml_ModLoader_get), Reflector.fml_ModLoader_postEvent, Reflector.newInstance(Reflector.ParticleFactoryRegisterEvent_Constructor));
+        //
         this.resourceManager.addReloadListener(this.particles);
         this.paintingSprites = new PaintingSpriteUploader(this.textureManager);
         this.resourceManager.addReloadListener(this.paintingSprites);
@@ -506,7 +568,16 @@
         this.resourceManager.addReloadListener(this.potionSprites);
         this.warningGPU = new GPUWarning();
         this.resourceManager.addReloadListener(this.warningGPU);
-        this.ingameGUI = new IngameGui(this);
+        //Forge
+        if(Reflector.ForgeIngameGui_Constructor.exists())
+        	this.ingameGUI = (IngameGui) Reflector.newInstance(Reflector.ForgeIngameGui_Constructor, this);
+        else
+        	this.ingameGUI = new IngameGui(this);
+        //Forge
+
+        //Forge
+        this.mouseHelper.registerCallbacks(this.mainWindow.getHandle()); //Forge: Moved below ingameGUI setting to prevent NPEs in handeler.
+        //
         this.debugRenderer = new DebugRenderer(this);
         RenderSystem.setErrorCallback(this::disableVSyncAfterGlError);
 
@@ -521,14 +592,11 @@
         this.mainWindow.setLogOnGlError();
         this.updateWindowSize();
 
-        if (s != null)
-        {
-            this.displayGuiScreen(new ConnectingScreen(new MainMenuScreen(), this, s, i));
-        }
-        else
-        {
-            this.displayGuiScreen(new MainMenuScreen(true));
-        }
+    	final String autoServerName = s;
+    	final int autoServerPort = i;
+    	//
+
+        
 
         ResourceLoadProgressGui.loadLogoTexture(this);
         List<IResourcePack> list = this.resourcePackRepository.func_232623_f_();
@@ -539,6 +607,17 @@
                 {
                     this.checkMissingData();
                 }
+                //Forge
+
+                if (Reflector.callBoolean(Reflector.ClientModLoader_completeModLoading)) return; // Do not overwrite the error screen
+                // FORGE: Move opening initial screen to after startup and events are enabled.
+                // Also Fixes MC-145102
+                if (autoServerName != null) {
+                	this.displayGuiScreen(new ConnectingScreen(new MainMenuScreen(), this, autoServerName, autoServerPort));
+                } else {
+                	this.displayGuiScreen(new MainMenuScreen(true));
+                }
+                //
             });
         }, false));
     }
@@ -550,12 +629,12 @@
 
     private String getWindowTitle()
     {
-        StringBuilder stringbuilder = new StringBuilder("Minecraft");
-
-        if (this.isModdedClient())
-        {
-            stringbuilder.append("*");
-        }
+    	StringBuilder stringbuilder = new StringBuilder(minecriftVerString);
+//
+//        if (this.isModdedClient())
+//        {
+//            stringbuilder.append("*");
+//        }
 
         stringbuilder.append(" ");
         stringbuilder.append(SharedConstants.getVersion().getName());
@@ -606,8 +685,7 @@
 
     private void restoreResourcePacks(Throwable throwableIn)
     {
-        if (this.resourcePackRepository.func_232621_d_().size() > 1)
-        {
+        if (this.resourcePackRepository.getEnabledPacks().stream().anyMatch(e -> !e.isAlwaysEnabled())) { //Forge: This caused infinite loop if any resource packs are forced. Such as mod resources. So check if we can disable any.
             ITextComponent itextcomponent;
 
             if (throwableIn instanceof SimpleReloadableResourceManager.FailedPackException)
@@ -721,7 +799,12 @@
         });
         SearchTreeReloadable<ItemStack> searchtreereloadable = new SearchTreeReloadable<>((stack) ->
         {
-            return ItemTags.getCollection().getOwningTags(stack.getItem()).stream();
+        	//Forge
+        	if(Reflector.ForgeItem_getTags.exists())
+        		return ((java.util.Set) Reflector.call(stack.getItem(),Reflector.ForgeItem_getTags)).stream();
+        	else
+        		return ItemTags.getCollection().getOwningTags(stack.getItem()).stream();
+        	//
         });
         NonNullList<ItemStack> nonnulllist = NonNullList.create();
 
@@ -818,16 +901,25 @@
         if (report.getFile() != null)
         {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + report.getFile());
+        	if(Reflector.ServerLifecycleHooks_handleExit.exists())
+        		Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+        	else
             System.exit(-1);
         }
         else if (report.saveToFile(file2))
         {
             Bootstrap.printToSYSOUT("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
+        	if(Reflector.ServerLifecycleHooks_handleExit.exists())
+        		Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+        	else
             System.exit(-1);
         }
         else
         {
             Bootstrap.printToSYSOUT("#@?@# Game crashed! Crash report could not be saved. #@?@#");
+        	if(Reflector.ServerLifecycleHooks_handleExit.exists())
+        		Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -2);
+        	else
             System.exit(-2);
         }
     }
@@ -959,10 +1051,11 @@
 
     public void displayGuiScreen(@Nullable Screen guiScreenIn)
     {
-        if (this.currentScreen != null)
-        {
-            this.currentScreen.onClose();
-        }
+        //Forge
+    	//if (this.currentScreen != null)
+        //{
+        //    this.currentScreen.onClose();
+        //}
 
         if (guiScreenIn == null && this.world == null)
         {
@@ -979,7 +1072,16 @@
                 this.player.respawnPlayer();
             }
         }
-
+        //Forge
+        Screen old = this.currentScreen;
+        Object event = Reflector.newInstance(Reflector.GuiOpenEvent_Constructor, guiScreenIn);
+        if(event != null) {
+        	if (Reflector.postForgeBusEvent(event)) return;
+        	guiScreenIn = (Screen) Reflector.call(event,Reflector.GuiOpenEvent_getGui);
+        }
+        if (old != null && guiScreenIn != old)
+           old.onClose();
+        //
         if (guiScreenIn instanceof MainMenuScreen || guiScreenIn instanceof MultiplayerScreen)
         {
             this.gameSettings.showDebugInfo = false;
@@ -1149,11 +1251,17 @@
 
         if (!this.skipRenderWorld)
         {
+    		//Forge
+    		Reflector.call(Reflector.BasicEventHooks_onRenderTickStart, this.timer.renderPartialTicks);
+    		//
             this.profiler.endStartSection("gameRenderer");
             this.gameRenderer.updateCameraAndRender(this.isGamePaused ? this.renderPartialTicksPaused : this.timer.renderPartialTicks, i, renderWorldIn);
             this.profiler.endStartSection("toasts");
             this.toastGui.func_238541_a_(new MatrixStack());
             this.profiler.endSection();
+    		//Forge
+    		Reflector.call(Reflector.BasicEventHooks_onRenderTickEnd, this.timer.renderPartialTicks);
+    		//
         }
 
         if (this.profilerResult != null)
@@ -1273,11 +1381,15 @@
         if (this.currentScreen != null)
         {
             this.currentScreen.resize(this, this.mainWindow.getScaledWidth(), this.mainWindow.getScaledHeight());
+            //FORGE
+            Reflector.call(Reflector.ForgeHooksClient_resizeGuiLayers, this, this.mainWindow.getScaledWidth(), this.mainWindow.getScaledHeight());
+            //
         }
 
         Framebuffer framebuffer = this.getFramebuffer();
         framebuffer.resize(this.mainWindow.getFramebufferWidth(), this.mainWindow.getFramebufferHeight(), IS_RUNNING_ON_MAC);
-        this.gameRenderer.updateShaderGroupSize(this.mainWindow.getFramebufferWidth(), this.mainWindow.getFramebufferHeight());
+        //Forge adds nullcheck
+        if (this.gameRenderer!=null) this.gameRenderer.updateShaderGroupSize(this.mainWindow.getFramebufferWidth(), this.mainWindow.getFramebufferHeight());
         this.mouseHelper.setIgnoreFirstMove();
     }
 
@@ -1516,34 +1628,52 @@
 
     private void sendClickBlockToController(boolean leftClick)
     {
-        if (!leftClick)
-        {
-            this.leftClickCounter = 0;
-        }
-
-        if (this.leftClickCounter <= 0 && !this.player.isHandActive())
-        {
-            if (leftClick && this.objectMouseOver != null && this.objectMouseOver.getType() == RayTraceResult.Type.BLOCK)
-            {
-                BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
-                BlockPos blockpos = blockraytraceresult.getPos();
-
-                if (!this.world.getBlockState(blockpos).isAir())
-                {
-                    Direction direction = blockraytraceresult.getFace();
-
-                    if (this.playerController.onPlayerDamageBlock(blockpos, direction))
-                    {
-                        this.particles.addBlockHitEffects(blockpos, direction);
+    	if (!leftClick)
+    	{
+    		this.leftClickCounter = 0;
+    	}
+
+    	if (this.leftClickCounter <= 0 && !this.player.isHandActive())
+    	{
+    		if (leftClick && this.objectMouseOver != null && this.objectMouseOver.getType() == RayTraceResult.Type.BLOCK)
+    		{
+    			BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
+    			BlockPos blockpos = blockraytraceresult.getPos();
+
+    			Object inputEvent = null;
+    			if (!this.world.isAirBlock(blockpos)) {
+    				//Forge
+    				inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.gameSettings.keyBindAttack, Hand.MAIN_HAND);
+    				if (inputEvent !=null && Reflector.callBoolean(inputEvent,  Reflector.Event_isCanceled)) {
+    					if (Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand)) {
+    						this.particles.addBlockHitEffects(blockpos, blockraytraceresult);
+    						this.player.swingArm(Hand.MAIN_HAND);        			
+    					}
+    					return;
+    				}
+    				//
+    				Direction direction = blockraytraceresult.getFace();
+
+    				if (this.playerController.onPlayerDamageBlock(blockpos, direction))
+    				{
+    					//Forge
+    					if(inputEvent != null) {
+    						if (Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand)) {
+    							this.particles.addBlockHitEffects(blockpos, blockraytraceresult);
+    							this.player.swingArm(Hand.MAIN_HAND);
+    						}
+    					} else {
+    						this.particles.addBlockHitEffects(blockpos, direction);
                         this.player.swingArm(Hand.MAIN_HAND);
-                    }
-                }
-            }
-            else
-            {
-                this.playerController.resetBlockRemoving();
-            }
-        }
+    					}
+    				}
+    			}
+    		}
+    		else 
+    		{
+    			this.playerController.resetBlockRemoving();
+    		}
+    	}
     }
 
     private void clickMouse()
@@ -1561,6 +1691,12 @@
             }
             else if (!this.player.isRowingBoat())
             {
+            	Object inputEvent;
+            	//Forge
+				inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.gameSettings.keyBindAttack, Hand.MAIN_HAND);
+
+                if (inputEvent == null || !Reflector.callBoolean(inputEvent,  Reflector.Event_isCanceled))
+                	//
                 switch (this.objectMouseOver.getType())
                 {
                     case ENTITY:
@@ -1571,7 +1707,7 @@
                         BlockRayTraceResult blockraytraceresult = (BlockRayTraceResult)this.objectMouseOver;
                         BlockPos blockpos = blockraytraceresult.getPos();
 
-                        if (!this.world.getBlockState(blockpos).isAir())
+                        if (!this.world.isAirBlock(blockpos))
                         {
                             this.playerController.clickBlock(blockpos, blockraytraceresult.getFace());
                             break;
@@ -1584,9 +1720,12 @@
                         }
 
                         this.player.resetCooldown();
+                        //Forge
+                        Reflector.call(Reflector.ForgeHooks_onEmptyLeftClick, this.player);
+                        //
                 }
-
-                this.player.swingArm(Hand.MAIN_HAND);
+                if (inputEvent == null || Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand))
+                	this.player.swingArm(Hand.MAIN_HAND);
             }
         }
     }
@@ -1609,6 +1748,14 @@
 
                 for (Hand hand : Hand.values())
                 {
+                	Object inputEvent;
+                	inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 1, this.gameSettings.keyBindUseItem, hand);
+
+                	if (inputEvent !=null && Reflector.callBoolean(inputEvent,  Reflector.Event_isCanceled)) {
+                		if (Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand)) 
+                			this.player.swingArm(hand);
+                		return;
+                	}
                     ItemStack itemstack = this.player.getHeldItem(hand);
 
                     if (this.objectMouseOver != null)
@@ -1629,9 +1776,11 @@
                                 {
                                     if (actionresulttype.isSuccess())
                                     {
-                                        this.player.swingArm(hand);
-                                    }
-
+                                    	//Forge
+                                    	if (inputEvent == null || Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand))
+                                    		this.player.swingArm(hand);
+                                    	//
+                                    	}
                                     return;
                                 }
 
@@ -1646,7 +1795,10 @@
                                 {
                                     if (actionresulttype1.isSuccess())
                                     {
-                                        this.player.swingArm(hand);
+                                    	//Forge
+                                    	if (inputEvent == null || Reflector.callBoolean(inputEvent, Reflector.ClickInputEvent_shouldSwingHand))
+                                    		this.player.swingArm(hand);
+                                    	//
 
                                         if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.playerController.isInCreativeMode()))
                                         {
@@ -1663,7 +1815,10 @@
                                 }
                         }
                     }
-
+                    //Forge
+                    if (itemstack.isEmpty() && (this.objectMouseOver == null || this.objectMouseOver.getType() == RayTraceResult.Type.MISS))
+                    	Reflector.call(Reflector.ForgeHooks_onEmptyClick, this.player, hand);
+                    //
                     if (!itemstack.isEmpty())
                     {
                         ActionResultType actionresulttype2 = this.playerController.processRightClick(this.player, this.world, hand);
@@ -1703,6 +1858,9 @@
         }
 
         this.profiler.startSection("gui");
+        //Forge
+        Reflector.call(Reflector.BasicEventHooks_onPreClientTick);
+        //
 
         if (!this.isGamePaused)
         {
@@ -1804,8 +1962,11 @@
             this.gameRenderer.stopUseShader();
         }
 
-        if (!this.isGamePaused)
-        {
+		// Vivecraft
+		PlayerModelController.getInstance().tick();
+		//
+		
+		if (!this.isGamePaused) {
             this.musicTicker.tick();
         }
 
@@ -1875,6 +2036,9 @@
         this.profiler.endStartSection("keyboard");
         this.keyboardListener.tick();
         this.profiler.endSection();
+        //Forge
+        Reflector.call(Reflector.BasicEventHooks_onPostClientTick);
+        //
     }
 
     private boolean func_244600_aM()
@@ -1994,8 +2158,8 @@
         {
             if (!this.gameSettings.keyBindUseItem.isKeyDown())
             {
-                this.playerController.onStoppedUsingItem(this.player);
-            }
+					this.playerController.onStoppedUsingItem(this.player);
+				}
 
             while (this.gameSettings.keyBindAttack.isPressed())
             {
@@ -2067,7 +2231,7 @@
 
     public void loadWorld(String worldName)
     {
-        this.loadWorld(worldName, DynamicRegistries.func_239770_b_(), Minecraft::loadDataPackCodec, Minecraft::loadWorld, false, Minecraft.WorldSelectionType.BACKUP);
+        this.loadWorld(worldName, DynamicRegistries.func_239770_b_(), Minecraft::loadDataPackCodec, Minecraft::loadWorld, false, Minecraft.WorldSelectionType.BACKUP, false);
     }
 
     public void createWorld(String worldName, WorldSettings worldSettings, DynamicRegistries.Impl dynamicRegistriesIn, DimensionGeneratorSettings dimensionGeneratorSettings)
@@ -2084,10 +2248,11 @@
             });
             DimensionGeneratorSettings dimensiongeneratorsettings = dataresult.resultOrPartial(Util.func_240982_a_("Error reading worldgen settings after loading data packs: ", LOGGER::error)).orElse(dimensionGeneratorSettings);
             return new ServerWorldInfo(worldSettings, dimensiongeneratorsettings, dataresult.lifecycle());
-        }, false, Minecraft.WorldSelectionType.CREATE);
+        }, false, Minecraft.WorldSelectionType.CREATE, true);
     }
 
-    private void loadWorld(String worldName, DynamicRegistries.Impl dynamicRegistries, Function<SaveFormat.LevelSave, DatapackCodec> levelSaveToDatapackFunction, Function4<SaveFormat.LevelSave, DynamicRegistries.Impl, IResourceManager, DatapackCodec, IServerConfiguration> quadFunction, boolean vanillaOnly, Minecraft.WorldSelectionType selectionType)
+    // Forge does this crap
+    private void loadWorld(String worldName, DynamicRegistries.Impl dynamicRegistries, Function<SaveFormat.LevelSave, DatapackCodec> levelSaveToDatapackFunction, Function4<SaveFormat.LevelSave, DynamicRegistries.Impl, IResourceManager, DatapackCodec, IServerConfiguration> quadFunction, boolean vanillaOnly, Minecraft.WorldSelectionType selectionType, boolean creating)
     {
         SaveFormat.LevelSave saveformat$levelsave;
 
@@ -2104,17 +2269,22 @@
         }
 
         Minecraft.PackManager minecraft$packmanager;
+		final DynamicRegistries.Impl dyn_f;
 
         try
         {
-            minecraft$packmanager = this.reloadDatapacks(dynamicRegistries, levelSaveToDatapackFunction, quadFunction, vanillaOnly, saveformat$levelsave);
+        	// FORGE
+			Minecraft.PackManager mgr = this.reloadDatapacks(dynamicRegistries, levelSaveToDatapackFunction, quadFunction, vanillaOnly, saveformat$levelsave);
+			dyn_f = creating ? dynamicRegistries : DynamicRegistries.func_239770_b_();
+			minecraft$packmanager = creating ? mgr : this.reloadDatapacks(dyn_f, levelSaveToDatapackFunction, quadFunction, vanillaOnly, saveformat$levelsave);
+			// END FORGE
         }
         catch (Exception exception)
         {
             LOGGER.warn("Failed to load datapacks, can't proceed with server load", (Throwable)exception);
             this.displayGuiScreen(new DatapackFailureScreen(() ->
             {
-                this.loadWorld(worldName, dynamicRegistries, levelSaveToDatapackFunction, quadFunction, true, selectionType);
+                this.loadWorld(worldName, dynamicRegistries, levelSaveToDatapackFunction, quadFunction, true, selectionType, creating);
             }));
 
             try
@@ -2140,7 +2310,7 @@
 
             try
             {
-                saveformat$levelsave.saveLevel(dynamicRegistries, iserverconfiguration);
+                saveformat$levelsave.saveLevel(dyn_f, iserverconfiguration);
                 minecraft$packmanager.getDataPackRegistries().updateTags();
                 YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(this.proxy);
                 MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
@@ -2151,7 +2321,7 @@
                 PlayerProfileCache.setOnlineMode(false);
                 this.integratedServer = MinecraftServer.func_240784_a_((thread) ->
                 {
-                    return new IntegratedServer(thread, this, dynamicRegistries, saveformat$levelsave, minecraft$packmanager.getResourcePacks(), minecraft$packmanager.getDataPackRegistries(), iserverconfiguration, minecraftsessionservice, gameprofilerepository, playerprofilecache, (radius) -> {
+                    return new IntegratedServer(thread, this, dyn_f, saveformat$levelsave, minecraft$packmanager.getResourcePacks(), minecraft$packmanager.getDataPackRegistries(), iserverconfiguration, minecraftsessionservice, gameprofilerepository, playerprofilecache, (radius) -> {
                         TrackingChunkStatusListener trackingchunkstatuslistener = new TrackingChunkStatusListener(radius + 0);
                         trackingchunkstatuslistener.startTracking();
                         this.refChunkStatusListener.set(trackingchunkstatuslistener);
@@ -2205,6 +2375,13 @@
             {
             }));
             networkmanager.sendPacket(new CHandshakePacket(socketaddress.toString(), 0, ProtocolType.LOGIN));
+        //Forge
+        com.mojang.authlib.GameProfile gameProfile = this.getSession().getProfile();
+        if((Reflector.ForgeSession_hasCachedProperties.exists() && !Reflector.callBoolean(this.getSession(),Reflector.ForgeSession_hasCachedProperties))) {
+           gameProfile = sessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
+           Reflector.call(this.getSession(), Reflector.ForgeSession_setProperties, gameProfile.getProperties());
+        }
+        //
             networkmanager.sendPacket(new CLoginStartPacket(this.getSession().getProfile()));
             this.networkManager = networkmanager;
         }
@@ -2212,7 +2389,7 @@
         {
             this.deleteWorld(selectionType, worldName, flag, () ->
             {
-                this.loadWorld(worldName, dynamicRegistries, levelSaveToDatapackFunction, quadFunction, vanillaOnly, Minecraft.WorldSelectionType.NONE);
+                this.loadWorld(worldName, dynamicRegistries, levelSaveToDatapackFunction, quadFunction, vanillaOnly, Minecraft.WorldSelectionType.NONE, creating);
             });
             minecraft$packmanager.close();
 
@@ -2306,6 +2483,10 @@
      */
     public void loadWorld(ClientWorld worldClientIn)
     {
+    	//Forge
+        if (world != null) 
+        	Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, world));
+        //
         WorkingScreen workingscreen = new WorkingScreen();
         workingscreen.displaySavingString(new TranslationTextComponent("connect.joining"));
         this.updateScreenTick(workingscreen);
@@ -2342,12 +2523,18 @@
         IntegratedServer integratedserver = this.integratedServer;
         this.integratedServer = null;
         this.gameRenderer.resetData();
+        //Forge
+        Reflector.call(Reflector.ClientHooks_firePlayerLogout, this.playerController, this.player);
+        //
         this.playerController = null;
         NarratorChatListener.INSTANCE.clear();
         this.updateScreenTick(screenIn);
 
         if (this.world != null)
         {
+        	//forge
+        	Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, world));
+            //
             if (integratedserver != null)
             {
                 this.profiler.startSection("waitForServer");
@@ -2364,6 +2551,9 @@
             this.ingameGUI.resetPlayersOverlayFooterHeader();
             this.currentServerData = null;
             this.integratedServerIsRunning = false;
+            //forge
+            Reflector.call(Reflector.ClientHooks_handleClientWorldClosing, world);
+            //
             this.game.leaveGameSession();
         }
 
@@ -2397,6 +2587,9 @@
         this.particles.clearEffects(worldIn);
         TileEntityRendererDispatcher.instance.setWorld(worldIn);
         this.setDefaultMinecraftTitle();
+        //Forge
+        Reflector.call(Reflector.MinecraftForgeClient_clearRenderCache);
+        //
     }
 
     public boolean isMultiplayerEnabled()
@@ -2465,6 +2658,16 @@
     {
         if (this.objectMouseOver != null && this.objectMouseOver.getType() != RayTraceResult.Type.MISS)
         {
+        	
+			Object inputEvent;
+			inputEvent = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 2, this.gameSettings.keyBindPickBlock, Hand.MAIN_HAND);
+       	
+        	//Forge
+            if (inputEvent != null && !Reflector.callBoolean(inputEvent, Reflector.Event_isCanceled))
+            	Reflector.call(Reflector.ForgeHooks_onPickBlock, this.objectMouseOver, this.player, this.world);
+            if(inputEvent != null) return;
+            //
+            
             boolean flag = this.player.abilities.isCreativeMode;
             TileEntity tileentity = null;
             RayTraceResult.Type raytraceresult$type = this.objectMouseOver.getType();
@@ -3182,8 +3385,12 @@
         {
             supplier = wrapV4(supplier);
         }
-
-        return new ResourcePackInfo(name, isAlwaysEnabled, supplier, resourcePack, resourcePackMeta, priority, decorator);
+        //Forge
+        if(Reflector.IForgeIResourcePack_isHidden.exists())
+        	return (ResourcePackInfo) Reflector.newInstance(Reflector.ClientResourcePackInfo_Constructor, name, isAlwaysEnabled, supplier, resourcePack, resourcePackMeta, priority, decorator, Reflector.callBoolean(resourcePack,Reflector.IForgeIResourcePack_isHidden));
+        else 
+            return new ResourcePackInfo(name, isAlwaysEnabled, supplier, resourcePack, resourcePackMeta, priority, decorator);
+        //
     }
 
     private static Supplier<IResourcePack> wrapV3(Supplier<IResourcePack> resourcePackSupplier)
@@ -3248,4 +3455,14 @@
         CREATE,
         BACKUP;
     }
+       
+    // FORGE
+    public ItemColors getItemColors() {
+    	return this.itemColors;
+    }
+
+    public SearchTreeManager getSearchTreeManager() {
+    	return this.searchTreeManager;
+    }
+    //
 }
